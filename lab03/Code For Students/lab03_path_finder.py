# recorrido en profundidad de un grafo: DFS Depth-First Search. 
def find_path(graph, start, end):
    visitados =  [False]*len(graph)
    visitados[start] = True
    return DFS(graph, start, end, visitados, [start])
     

def DFS(graph, v, end, visitados, path):
   if v==end:
       return path
   else:
       for i in range(len(graph)):
            if not visitados[i] and graph[v][i]:
              visitados[i]=True
              camino = DFS(graph, i, end ,visitados, path + [i])
              if camino!=[]:
                  return camino
       return []
              
   
 ## El coste operacional de la funcion es de n^2 ya que en el caso peor recorreriamos la matriz entera, todos los vertices.
 ## Tenemos un primer bucle que comprueba el nodo actual en el que estamos, y dentro de ese bucle tenemoso tro anidado que 
 ## comprueba su fila de adyaciencias con el resto de nodos, por lo tanto el numero de nodos maximo a comprobar (n) multiplicado
 ## por las adyacencias por cada nodo (n), n*n = O(n^2).
 
def test():
    g1 = [[1, 1, 1, 0, 0],
          [1, 1, 1, 1, 0],
          [1, 1, 1, 0, 1],
          [0, 1, 0, 1, 1],
          [0, 0, 1, 1, 1]]
    assert find_path(g1, 0, 4) in [[0, 2, 4], [0, 2, 1, 3, 4], [0, 1, 2, 4], [0, 1, 3, 4]]
    
    g2 = [[1, 1, 0, 0],
          [1, 1, 0, 0],
          [0, 0, 1, 1],
          [0, 0, 1, 1]]
    
    assert find_path(g2, 0, 1) in [[0,1]]    
    assert find_path(g2, 0, 2) == []
    
    g3 = [[1, 0, 1, 0, 0, 0],
          [0, 1, 0, 1, 0, 0],
          [1, 0, 1, 1, 1, 0],
          [0, 1, 1, 1, 0, 1],
          [0, 0, 1, 0, 1, 1],
          [0, 0, 0, 1, 1, 1]]
    
    assert find_path(g3, 1, 0) in [[1, 3, 2, 0], [1, 3, 5, 4, 2, 0]]
    
    g4 = [[1, 1, 1, 0, 0, 0],
          [1, 1, 0, 1, 1, 0],
          [1, 0, 1, 0, 0, 1],
          [0, 1, 0, 1, 1, 0],
          [0, 1, 0, 1, 1, 0],
          [0, 0, 1, 0, 0, 1]]
    
    assert find_path(g4, 0, 5) in [[0, 2, 5]]
    
    g5 = [[1, 1, 0, 0, 1, 0],
          [1, 1, 1, 0, 0, 0],
          [0, 1, 1, 1, 0, 0],
          [0, 0, 1, 1, 0, 0],
          [1, 0, 0, 0, 1, 1],
          [0, 0, 0, 0, 1, 1]]
    
    assert find_path(g5, 0, 5) in [[0, 4, 5]]
    
    g6 = [[1, 1, 0, 0, 1, 0, 0, 0],
          [1, 1, 1, 0, 0, 0, 0, 0],
          [0, 1, 1, 1, 0, 0, 0, 0],
          [0, 0, 1, 1, 0, 0, 0, 0],
          [1, 0, 0, 0, 1, 1, 0, 0],
          [0, 0, 0, 0, 1, 1, 1, 0],
          [0, 0, 0, 0, 0, 1, 1, 1],
          [0, 0, 0, 0, 0, 0, 1, 1]]
    
    assert find_path(g6, 0, 7) == [0, 4, 5, 6, 7]
    
    
    g7 = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1]]
        
    
    assert(find_path(g7, 0, 23)) == []
    

test()
